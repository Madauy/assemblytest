DATA:
  arr   7
        12
        4
        0
  len   4
  i     0
  j     0
  min   0
  max   0
  min_idx 0
  max_idx 0
  tmp   0
  one   1

CODE:
  ; Initialize i
  MOV B, i
  MOV A, (B)
  ADD A, one
  MOV (B), A

_start_outer_loop:
  ; Reset min and max values
  MOV B, arr
  ADD A, i
  MOV B, A
  MOV A, (B)
  MOV B, min
  MOV (B), A
  MOV B, max
  MOV (B), A

  ; Initialize j and index values
  MOV B, i
  MOV A, (B)
  ADD A, one
  MOV B, j
  MOV (B), A
  MOV B, min_idx
  MOV (B), A
  MOV B, max_idx
  MOV (B), A

_start_inner_loop:
  ; Compare with min
  MOV B, arr
  ADD A, j
  MOV B, A
  MOV A, (B)
  MOV B, min
  CPM A, (B)
  JLT _update_min
  JMP _compare_with_max

_update_min:
  MOV B, min
  MOV (B), A
  MOV B, min_idx
  MOV (B), j

_compare_with_max:
  MOV B, arr
  ADD A, j
  MOV B, A
  MOV A, (B)
  MOV B, max
  CPM A, (B)
  JGT _update_max
  JMP _increment_j

_update_max:
  MOV B, max
  MOV (B), A
  MOV B, max_idx
  MOV (B), j

_increment_j:
  ; Increment j
  MOV B, j
  MOV A, (B)
  ADD A, one
  MOV (B), A

  ; Check if j < len - i - 1
  MOV B, len
  MOV A, (B)
  SUB A, i
  SUB A, one
  CPM A, j
  JLT _start_inner_loop

  ; Swap min value
  MOV B, arr
  ADD A, i
  MOV B, A
  MOV A, (B)
  MOV B, tmp
  MOV (B), A
  MOV B, arr
  ADD A, min_idx
  MOV B, A
  MOV A, (B)
  MOV B, arr
  ADD A, i
  MOV B, A
  MOV (B), A
  MOV B, arr
  ADD A, min_idx
  MOV B, A
  MOV B, tmp
  MOV A, (B)
  MOV (B), A

  ; Swap max value
  MOV B, arr
  MOV A, len
  SUB A, one
  SUB A, i
  ADD A, arr
  MOV B, A
  MOV A, (B)
  MOV B, tmp
  MOV (B), A
  MOV B, arr
  ADD A, max_idx
  MOV B, A
  MOV A, (B)
  MOV B, arr
  MOV A, len
   SUB A, one
  SUB A, i
  ADD A, arr
  MOV B, A
  MOV (B), A
  MOV B, arr
  ADD A, max_idx
  MOV B, A
  MOV B, tmp
  MOV A, (B)
  MOV (B), A

  ; Increment i
  MOV B, i
  MOV A, (B)
  ADD A, one
  MOV (B), A

  ; Check if i < len / 2
  MOV B, len
  MOV A, (B)
  SHR (B)
  MOV A, (B)
  CPM A, i
  JLT _start_outer_loop

; End
